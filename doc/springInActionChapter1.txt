Spring In Action 3.0 

Chapter 1 스프링 속으로 

 스프링은 기본적으로 "자바 개발을 폭넓게 간소화"하는데에 초점이 맞추어져 있다. 
 자바의 복잡도를 해결하는데 스프링은 4가지 전략을 채택했다.
  1.  POJO를 이용한 가볍고(경량화) , 비침투적인 개발
      - POJO를 이용한 비침투적인 개발이란 결국 코드의 군더더기(연관 코드)가 없다는 의미이다. 
  2.   DI와 인터페이스 지향을 통한 느슨한 결합도 
      - 결합도란 객체간에 연관성이 인터페이스로 느슨하게(변경이 발생 했을 경우 코드변화를 최소화) 결합되어있다.
      결합도가 높다면, 두 객체사이에 변화가 생길 시 영향을 많이 받는다.
      결합도가 낮다면, 두 객체사이에는 영향에 대한 변화도 없지만 결합도가 없는건 아무것도 하지 못한다.
  3.  Aspec와 공통규약을 통한 "선언적 프로그래밍"
  4.  Aspect 와 템플릿을 통한 상투적인 코드 축소 
  
  
  [1] POJO의 힘
    - POJO(Plane Old Java Bean)이란 평범한 자바객체를 말한다. 즉, Object를 상속받는 자바 클래스가 POJO이다. 
    - 스프링이 POJO기반이라는 의미는 무엇인가? 스프링은 자바의 구성단위인 클래스를 스프링코드(?)가 전혀 없이 활용한다.
       어쩔 수 없는 경우에 스프링 애너테이션(Annotation)이 붙지만 그렇지 않은 경우엔 "POJO'라는 뜻이다. 
       
       
  [2] 종속객체(D.I) 주입 
    - 스프링 컨테이너는 객체간의 관계를  DI를 통해 래퍼런스(객체자체가 아닌 주소 값)를 주입받는다. 
    - 두 객체간의 결합(관계)을 느슨하게 해주는것이 목적이며 느슨한 결합도는 결국 코드변경에 대한 영향이 적다는 의미이다. 
    - 종속객체 주입, 의존성 주입, 의존관계 주입 이는 DI를 나타내는 용어이다. 자세하게 의미적으로는 차이가 있으나 모두 같은 개념을 갖고있다. 
    - 종소객체 주입하는 방법에는 여러가지가 있는데 
       1. Constructor를 통한 Injection 
       2. SetterMethod를 이용한 Injection
       3. init Interface(초기화 인터페이스)를 이용한 Injection   --> 이건 나도 잘 모르겠음 
   [3] AOP 적용
    - 스프링은 AOP를 지원하는데 AOP의 장점은 중복코드를 엄청나게 줄여주고 코드의 지저분함이 없어지며, 재사용을 높여주는 점이 특징이다.
    - AOP를 이해하기 위한 용어가 있는데 바로 관심사이다. 어플리케이션은 여러개의 모듈1 + 모듈2 + 모듈3 로 이루어져있는데 
    이는 어플리케이션을 이용하는 사용자에게 제공하는 기능 일 수도 있고 모듈간에 활용하는 기능일 수도 있다. 각각의 기능을 수행하는 모듈을 "관심사"
    라고 볼 수 있으며, 어플리케이션을 이루는 서비스(제공의 의미)적인 측면의 기능을 "횡단관심사" 라고 할 수 있다.
    이런 "횡단관심사"의 기능동작에 추가적인 기능 또는 확장된 기능을 위한 동작을 수행하는 모듈을 "종단관심사"라고 볼 수 있다. 
    예를들어 게시판의 기능을 작성할 떄 삽입 , 수정, 삭제의 기능은 서비스, 즉 횡단관심사라고 볼수 있으며,
    횡단관심사의 동작에 추가적으로 붙이는 동작인 로그, 보안 등은 종단관심사라고 볼 수 있다는 것이다. 
    
    - AOP는 선언적 프로그래밍이다. 기능의 수행되는 시점을 선언적으로 명시하여 수행시키는 프로그래밍이라는 뜻(스프링에서는 이를 표현식형태로 작성)
    
   [4] 템플릿을 이용한 상투적인 코드 제거 
    - 스프링은 템플릿을 사용하여 상투적인 코드(중복이 자주일어나는..)들을 제거할 수 있다 기본적으로 jdbc 코드를 제거한다. 

    -  
3장 XML설정 최소화

스프링이 XML 설정을 줄이는 몇가지 기능이 있다.
- 오토와이어링 (autowiring)
- 오토디스커버리 (autodiscovery)

1. 빈 프로퍼티 오토와이어링
	- 빈 프로퍼티에 할당할 빈 래퍼런스가 "명확"한 경우가 있는데 이럴 경우 오토와이어링을 사용
	
	오토와이어링의 네 종류 
		- byName : 해당 빈 프로퍼티와 일치하는 이름(또는 ID)를 가지는 빈 정의
		- byType : 해당 빈 프로퍼티와 일치하는 타입을 가지는 빈 정의
		- constructor : byType과 유사하나 해당 프로퍼티를 설정하기 위한 생성자가 존재하는 경우 오토와이어링
		- autodetect : constructor 오토와이어링을 先적용 실패시 byType 後적용
		
	---------------------------------------------------------------------------	
	---------------------------------------------------------------------------	
	1.1 byName 오토와이어링 
	 - 이름으로 오토와이어링을 한다는 의미이다.
	 - property 의 이름과 property에 와이어링될 빈의 이름이 같다면 자동으로 와이어링 한다. 
	 
	 예제 )
	 - <bean id="test" class="...."> </bean>
	 - <bean id="test2" class="...">
	 <property name="test" ref="test"> 
	 </bean>
	 두 빈은 관계가 있는데 property의 name의 값이 다른 빈ID값과 같다. 이럴때는
	 
	 <bean id="test2" class="......" autowire="byName"> </bean>
	 autowire="byName" 하게 되면 이름으로서 두 빈이 와이어링 된다. 
	 
	 - byName의 단점은 주입하려는 빈의 이름과 대상 프로퍼티의 이름이 같아야 한다. 
	 	(단점이라고 나와있긴 했지만 왠지 장점같다. )
	---------------------------------------------------------------------------
	1.2 byType 오토와이어링
		- Type으로 오토와이어링을 한다는 의미이다. 
		- 타입으로 비교한다는 것은 
			- <property name="sample" ref=".......sampleClass"> 일 때, sampleClass타입을
			- 갖고있는 빈에 대해서 오토와이어링을 해준다.
			- **제역사항** 하지만, 프로퍼티에 맞는 타입의 빈은 반드시 하나만 설정되어 있어야 한다.
			 	복수개의 타입이 존재한다며 스프링은 어떠한 시도도하지 않는다. 
		- 프로퍼티에 할당 될 복수의 타입이 존재할 경우의 두가지 방법으로 해결
			방법 1) 후보를 식별하는 방법 - bean에 primary="true" 속성 추가 (하지만 모든 Bean 은 default 가 
									true이기 떄문에 나머지 후보들에 대해서 primary="false"를 주어야한다. 
			방법 2) 후보에서 제거하는 방법 - bean에 autowire-candidate="false"를 속성을 추가한다.  
									이는 auto와이어드 대상에 포함되지 않는 bean이 된다. 
	---------------------------------------------------------------------------
	1.3 constructor (생성자 기반) 와이어링
		- 기본적으로 "자바"코드 내에서 생성자 방식 주입이 사용되고 있어야 한다. 사용되고 있다면
		bean에 autowire="constructor"속성을 추가한다.(<bean id="..." class="..." autowire="constructor"/>
	    - 스프링은 생성자의 매개변수 타입을 확인 하여 와이어링을 해준다. 
	    - Constructor 와이어링은 byType과 같은 제약사항을 같는다.(byType 제약사항 참조..)
	    - constoructor 와이어링을 사용한다면 <contructor-arg ref="">속성을 사용할 수 없다.  
	---------------------------------------------------------------------------
	1.4 autodetect (자동 감지) 와이어링 
		- 스프링이 자동으로 와이어링을 해주는 기능이다.
		- bean에 autowire="autodetect" 속성을 추가한다. 
		- 만약 contructor 설정을 적용한 후 대상이 없다면 byType을 시도한다. 
	---------------------------------------------------------------------------
	1.5 기본(default) 와이어링 
		- 전역 bean에 default-autowire="byName|byType|contructor|autodetect"를 설정할 수 있다.
		- deault-autowire="none" - 기본값이다. 
		- 주어진 설정파일에 있는 모든 빈에만 적용한다.(Context에 있는 bean이 아니다. )  
	---------------------------------------------------------------------------
	---------------------------------------------------------------------------
	
	
	1.6 명시적 와이어링 
		- 오토와이어링과 / 명시적 프로퍼티를 동시에 사용하는 의미이다.
		- 이에 대한 사용은 오토와이어링이 대상이 여러개있을 떄에 명시적으로 적용하여 대상을 명확하게 해준다는의미이다.

	1.7 애너테이션을 이용한 와이어링 
		- 스프링 2.5부터 새롭게 등장한 와이어링 기법이며, 오토와이어링을 위해 특정 프로퍼티에 선택적으로 적용한다. 
		- 애너테이션 와이어링은 스프링 컨테이너에서 기본적으로 "비활성화"이다. 
			<context:annotation-config /> 설정을 추가하여야 한다.
			이렇게 하면, 스프링이 값을 프로퍼티,메소드 그리고 생성자에 자동으로 와이어링 해야 함을 의미한다. 
		-  	애너테이션의 종류 
			1. 스프링의 @Autowire
				---------------------------------------------------------------
				@Autowire 로 애너테이트를 하면 byType으로 오토와이어링을 수행한다. 
				생성자,세터,변수등 어디에나 사용가능하다.
					생성자에 사용하면 자동적으로 contructor 와이어링을 수행
					세터에 사용하면 자동적으로 byType 와이어링을 수행한다.
					private 변수에도 와이어링을 수행한다. 
				이처럼 @Autowire 애너테이션은 빈을 생성할 때 와이어링되는것이 아닌 와이어링을 해야하는 의미로 인식한다. 
				스프링은 그 의미를 해석하여 와이어링을 하게된다. 
				
				@Autowire 될 빈이 없다면, "NoSuchBeanDefinitionException"이 발생한다.
				
				@Autowire의 범위를 제한하는 방법 
					방법 1) 선택적 오토와이어링 - @Autowire(required-false) 설정을 하게되면 와이어링이 실패했을 때 Null이 된다.
										   required 속성은 어디든지 사용할 수 있지만 생성자에 사용할 경우 하나의 생성자를 선택하기 위해 
										   required 속성을 true로 지정해줘야한다. 
										    또한, 여러생성자가 @Autowire를 사용한다면 스프링은 가장 적합한 인자를 가진 생성자를 선택한다. 
					방법 2) 모호한 종속객체 제한하기 - 스프링은 오토와이어링을 하기위해 빈의 선택이 모호할경우가 있는데 이때는 @Qualifier 애너테이션을 추가할 수 있다. 
											@Qualifier("BeanId") <- <bean id="BeanId" class="......" />
					방법 3) 커스텀 한정자 생성 
							- 커스텀 한정자 애너테이션을 만들려면 @Qualifier 로 애니터에트된 자체적인 애니테이션을 정의하기만 하면 된다.
							즉, 사용자만의 커스텀 한정자를 만들어 오토와이어링을 제한하는 것이다. (와이어링될 id가 복수개가 있을경우에...)	
			
			2. JSR-330의 @Inject
			 	---------------------------------------------------------------
			 	JCP(Java community process) 는 DI프레임워크를 통합하기 위한 표준화과정이며 , JSR-(number)로 
			 	문서를 정의한다.(JSR, Java Specification Request로서 자바플랫폼에 추가된 기술에 대한 공식문서)
			 	  지금 다룰 내용의 jsr-330의 핵심은 @Inject 애너테이션에 대한 표준정의라고 볼 수있다.(물론, 오토와이어링과 관련있음 ㅎㅎㅎ) 
			 	
			 	- @Autowire 와 마찬가지로 @Inject 는 프로퍼티 메소드 그리고 생성자를 오토와이어링하는데 사용 할 수 있다.  
			 	- 하지만, 와이어링의 실패에 대한 required 속성이 없다. (즉, 와이어링에 실패한다면 예외를 발생한다. ) 
			 	- Inject외에 또다른 방법인 래퍼런스를 직접 주입하지않는
			 	
			 	
			3. JSR-250의 @Resource
				---------------------------------------------------------------
			(2,3)번은 오토와이어링에 대한 표준 자바안이라고 볼 수 있다. 있다는 것만 알고 넘어가는게 좋을듯 함
			
			
			